// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGuiP
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawCmd* pdrawCmd = &drawCmd)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (ImDrawCmd* pdrawCmd = &drawCmd)
					{
						DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontNative(ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, void>)funcTable[1444])(font);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1444])((nint)font);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFont(ImFontPtr font)
		{
			DebugNodeFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontNative((ImFont*)pfont);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontGlyphesForSrcMaskNative(ImFont* font, ImFontBaked* baked, int srcMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, ImFontBaked*, int, void>)funcTable[1445])(font, baked, srcMask);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[1445])((nint)font, (nint)baked, srcMask);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ImFontPtr font, ImFontBakedPtr baked, int srcMask)
		{
			DebugNodeFontGlyphesForSrcMaskNative(font, baked, srcMask);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ref ImFont font, ImFontBakedPtr baked, int srcMask)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphesForSrcMaskNative((ImFont*)pfont, baked, srcMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ImFontPtr font, ref ImFontBaked baked, int srcMask)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				DebugNodeFontGlyphesForSrcMaskNative(font, (ImFontBaked*)pbaked, srcMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ref ImFont font, ref ImFontBaked baked, int srcMask)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					DebugNodeFontGlyphesForSrcMaskNative((ImFont*)pfont, (ImFontBaked*)pbaked, srcMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontGlyphNative(ImFont* font, ImFontGlyph* glyph)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, ImFontGlyph*, void>)funcTable[1446])(font, glyph);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1446])((nint)font, (nint)glyph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ImFontPtr font, ImFontGlyphPtr glyph)
		{
			DebugNodeFontGlyphNative(font, glyph);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ref ImFont font, ImFontGlyphPtr glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphNative((ImFont*)pfont, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ImFontPtr font, ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				DebugNodeFontGlyphNative(font, (ImFontGlyph*)pglyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ref ImFont font, ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					DebugNodeFontGlyphNative((ImFont*)pfont, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTextureNative(ImTextureData* tex, int intId, ImFontAtlasRect* highlightRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImTextureData*, int, ImFontAtlasRect*, void>)funcTable[1447])(tex, intId, highlightRect);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[1447])((nint)tex, intId, (nint)highlightRect);
			#endif
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ImTextureDataPtr tex, int intId, ImFontAtlasRectPtr highlightRect)
		{
			DebugNodeTextureNative(tex, intId, highlightRect);
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ImTextureDataPtr tex, int intId)
		{
			DebugNodeTextureNative(tex, intId, (ImFontAtlasRect*)(default));
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ref ImTextureData tex, int intId, ImFontAtlasRectPtr highlightRect)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				DebugNodeTextureNative((ImTextureData*)ptex, intId, highlightRect);
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ref ImTextureData tex, int intId)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				DebugNodeTextureNative((ImTextureData*)ptex, intId, (ImFontAtlasRect*)(default));
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ImTextureDataPtr tex, int intId, ref ImFontAtlasRect highlightRect)
		{
			fixed (ImFontAtlasRect* phighlightRect = &highlightRect)
			{
				DebugNodeTextureNative(tex, intId, (ImFontAtlasRect*)phighlightRect);
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ref ImTextureData tex, int intId, ref ImFontAtlasRect highlightRect)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				fixed (ImFontAtlasRect* phighlightRect = &highlightRect)
				{
					DebugNodeTextureNative((ImTextureData*)ptex, intId, (ImFontAtlasRect*)phighlightRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeStorageNative(ImGuiStorage* storage, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, byte*, void>)funcTable[1448])(storage, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1448])((nint)storage, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, byte* label)
		{
			DebugNodeStorageNative(storage, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, byte* label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				DebugNodeStorageNative((ImGuiStorage*)pstorage, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeStorageNative(storage, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, ref byte label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, string label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeStorageNative((ImGuiStorage*)pstorage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTabBarNative(ImGuiTabBar* tabBar, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, byte*, void>)funcTable[1449])(tabBar, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1449])((nint)tabBar, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, byte* label)
		{
			DebugNodeTabBarNative(tabBar, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, byte* label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeTabBarNative(tabBar, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ref byte label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, string label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTableNative(ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)funcTable[1450])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1450])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTable(ImGuiTablePtr table)
		{
			DebugNodeTableNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTable(ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				DebugNodeTableNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTableSettingsNative(ImGuiTableSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, void>)funcTable[1451])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1451])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTableSettings(ImGuiTableSettingsPtr settings)
		{
			DebugNodeTableSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTableSettings(ref ImGuiTableSettings settings)
		{
			fixed (ImGuiTableSettings* psettings = &settings)
			{
				DebugNodeTableSettingsNative((ImGuiTableSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeInputTextStateNative(ImGuiInputTextState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)funcTable[1452])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1452])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeInputTextState(ImGuiInputTextStatePtr state)
		{
			DebugNodeInputTextStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeInputTextState(ref ImGuiInputTextState state)
		{
			fixed (ImGuiInputTextState* pstate = &state)
			{
				DebugNodeInputTextStateNative((ImGuiInputTextState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTypingSelectStateNative(ImGuiTypingSelectState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTypingSelectState*, void>)funcTable[1453])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1453])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTypingSelectState(ImGuiTypingSelectStatePtr state)
		{
			DebugNodeTypingSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTypingSelectState(ref ImGuiTypingSelectState state)
		{
			fixed (ImGuiTypingSelectState* pstate = &state)
			{
				DebugNodeTypingSelectStateNative((ImGuiTypingSelectState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeMultiSelectStateNative(ImGuiMultiSelectState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectState*, void>)funcTable[1454])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1454])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeMultiSelectState(ImGuiMultiSelectStatePtr state)
		{
			DebugNodeMultiSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeMultiSelectState(ref ImGuiMultiSelectState state)
		{
			fixed (ImGuiMultiSelectState* pstate = &state)
			{
				DebugNodeMultiSelectStateNative((ImGuiMultiSelectState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowNative(ImGuiWindow* window, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte*, void>)funcTable[1455])(window, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1455])((nint)window, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, byte* label)
		{
			DebugNodeWindowNative(window, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeWindowNative((ImGuiWindow*)pwindow, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowNative((ImGuiWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowSettingsNative(ImGuiWindowSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*, void>)funcTable[1456])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1456])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowSettings(ImGuiWindowSettingsPtr settings)
		{
			DebugNodeWindowSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowSettings(ref ImGuiWindowSettings settings)
		{
			fixed (ImGuiWindowSettings* psettings = &settings)
			{
				DebugNodeWindowSettingsNative((ImGuiWindowSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowsListNative(ImVector<ImGuiWindowPtr>* windows, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<ImGuiWindowPtr>*, byte*, void>)funcTable[1457])(windows, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1457])((nint)windows, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, byte* label)
		{
			DebugNodeWindowsListNative(windows, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, byte* label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowsListNative(windows, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, ref byte label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, ReadOnlySpan<byte> label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, string label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowsListByBeginStackParentNative(ImGuiWindow** windows, int windowsSize, ImGuiWindow* parentInBeginStack)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow**, int, ImGuiWindow*, void>)funcTable[1458])(windows, windowsSize, parentInBeginStack);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[1458])((nint)windows, windowsSize, (nint)parentInBeginStack);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, parentInBeginStack);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, parentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
			{
				DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
				{
					DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeViewportNative(ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)funcTable[1459])(viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1459])((nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeViewport(ImGuiViewportPPtr viewport)
		{
			DebugNodeViewportNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeViewport(ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeViewportNative((ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodePlatformMonitorNative(ImGuiPlatformMonitor* monitor, byte* label, int idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPlatformMonitor*, byte*, int, void>)funcTable[1460])(monitor, label, idx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[1460])((nint)monitor, (nint)label, idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, byte* label, int idx)
		{
			DebugNodePlatformMonitorNative(monitor, label, idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, byte* label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, label, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, ref byte label, int idx)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodePlatformMonitorNative(monitor, (byte*)plabel, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, ReadOnlySpan<byte> label, int idx)
		{
			fixed (byte* plabel = label)
			{
				DebugNodePlatformMonitorNative(monitor, (byte*)plabel, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, string label, int idx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodePlatformMonitorNative(monitor, pStr0, idx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, ref byte label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, (byte*)plabel, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, ReadOnlySpan<byte> label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				fixed (byte* plabel = label)
				{
					DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, (byte*)plabel, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, string label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, pStr0, idx);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugRenderKeyboardPreviewNative(ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)funcTable[1461])(drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1461])((nint)drawList);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderKeyboardPreview(ImDrawListPtr drawList)
		{
			DebugRenderKeyboardPreviewNative(drawList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderKeyboardPreview(ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderKeyboardPreviewNative((ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugRenderViewportThumbnailNative(ImDrawList* drawList, ImGuiViewportP* viewport, ImRect bb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImGuiViewportP*, ImRect, void>)funcTable[1462])(drawList, viewport, bb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)funcTable[1462])((nint)drawList, (nint)viewport, bb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			DebugRenderViewportThumbnailNative(drawList, viewport, bb);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, viewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugRenderViewportThumbnailNative(drawList, (ImGuiViewportP*)pviewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, (ImGuiViewportP*)pviewport, bb);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontLoader* ImFontLoaderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontLoader*>)funcTable[1463])();
			#else
			return (ImFontLoader*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1463])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontLoaderPtr ImFontLoader()
		{
			ImFontLoaderPtr ret = ImFontLoaderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative(ImFontLoader* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontLoader*, void>)funcTable[1464])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1464])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ImFontLoaderPtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ref ImFontLoader self)
		{
			fixed (ImFontLoader* pself = &self)
			{
				DestroyNative((ImFontLoader*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontLoader* ImFontAtlasGetFontLoaderForStbTruetypeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontLoader*>)funcTable[1465])();
			#else
			return (ImFontLoader*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1465])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontLoaderPtr ImFontAtlasGetFontLoaderForStbTruetype()
		{
			ImFontLoaderPtr ret = ImFontAtlasGetFontLoaderForStbTruetypeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ImFontAtlasRectId_GetIndexNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[1466])(id);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[1466])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImFontAtlasRectId_GetIndex(int id)
		{
			int ret = ImFontAtlasRectId_GetIndexNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ImFontAtlasRectId_GetGenerationNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[1467])(id);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[1467])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImFontAtlasRectId_GetGeneration(int id)
		{
			int ret = ImFontAtlasRectId_GetGenerationNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ImFontAtlasRectId_MakeNative(int indexIdx, int genIdx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1468])(indexIdx, genIdx);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1468])(indexIdx, genIdx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImFontAtlasRectId_Make(int indexIdx, int genIdx)
		{
			int ret = ImFontAtlasRectId_MakeNative(indexIdx, genIdx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontAtlasBuilder* ImFontAtlasBuilderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlasBuilder*>)funcTable[1469])();
			#else
			return (ImFontAtlasBuilder*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1469])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontAtlasBuilderPtr ImFontAtlasBuilder()
		{
			ImFontAtlasBuilderPtr ret = ImFontAtlasBuilderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative(ImFontAtlasBuilder* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlasBuilder*, void>)funcTable[1470])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1470])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ImFontAtlasBuilderPtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ref ImFontAtlasBuilder self)
		{
			fixed (ImFontAtlasBuilder* pself = &self)
			{
				DestroyNative((ImFontAtlasBuilder*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildInitNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1471])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1471])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildInit(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildInitNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildInit(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildInitNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildDestroyNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1472])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1472])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildDestroy(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildDestroyNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildDestroy(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildDestroyNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildMainNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1473])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1473])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMain(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildMainNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMain(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildMainNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildSetupFontLoaderNative(ImFontAtlas* atlas, ImFontLoader* fontLoader)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontLoader*, void>)funcTable[1474])(atlas, fontLoader);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1474])((nint)atlas, (nint)fontLoader);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ImFontAtlasPtr atlas, ImFontLoaderPtr fontLoader)
		{
			ImFontAtlasBuildSetupFontLoaderNative(atlas, fontLoader);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ref ImFontAtlas atlas, ImFontLoaderPtr fontLoader)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontLoaderNative((ImFontAtlas*)patlas, fontLoader);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ImFontAtlasPtr atlas, ref ImFontLoader fontLoader)
		{
			fixed (ImFontLoader* pfontLoader = &fontLoader)
			{
				ImFontAtlasBuildSetupFontLoaderNative(atlas, (ImFontLoader*)pfontLoader);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ref ImFontAtlas atlas, ref ImFontLoader fontLoader)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontLoader* pfontLoader = &fontLoader)
				{
					ImFontAtlasBuildSetupFontLoaderNative((ImFontAtlas*)patlas, (ImFontLoader*)pfontLoader);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildUpdatePointersNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1475])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1475])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildUpdatePointers(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildUpdatePointersNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildUpdatePointers(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildUpdatePointersNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildRenderBitmapFromStringNative(ImFontAtlas* atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int, int, byte*, byte, void>)funcTable[1476])(atlas, x, y, w, h, inStr, inMarkerChar);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, nint, byte, void>)funcTable[1476])((nint)atlas, x, y, w, h, (nint)inStr, inMarkerChar);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar)
		{
			ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, inStr, inMarkerChar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar)
		{
			fixed (byte* pinStr = inStr)
			{
				ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = inStr)
				{
					ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, pStr0, inMarkerChar);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Clear output and custom rects<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildClearNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1477])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1477])((nint)atlas);
			#endif
		}

		/// <summary>
		/// Clear output and custom rects<br/>
		/// </summary>
		public static void ImFontAtlasBuildClear(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildClearNative(atlas);
		}

		/// <summary>
		/// Clear output and custom rects<br/>
		/// </summary>
		public static void ImFontAtlasBuildClear(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildClearNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImTextureData* ImFontAtlasTextureAddNative(ImFontAtlas* atlas, int w, int h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, ImTextureData*>)funcTable[1478])(atlas, w, h);
			#else
			return (ImTextureData*)((delegate* unmanaged[Cdecl]<nint, int, int, nint>)funcTable[1478])((nint)atlas, w, h);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImTextureDataPtr ImFontAtlasTextureAdd(ImFontAtlasPtr atlas, int w, int h)
		{
			ImTextureDataPtr ret = ImFontAtlasTextureAddNative(atlas, w, h);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImTextureDataPtr ImFontAtlasTextureAdd(ref ImFontAtlas atlas, int w, int h)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImTextureDataPtr ret = ImFontAtlasTextureAddNative((ImFontAtlas*)patlas, w, h);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureMakeSpaceNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1479])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1479])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureMakeSpace(ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureMakeSpaceNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureMakeSpace(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureMakeSpaceNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureRepackNative(ImFontAtlas* atlas, int w, int h)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, void>)funcTable[1480])(atlas, w, h);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)funcTable[1480])((nint)atlas, w, h);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureRepack(ImFontAtlasPtr atlas, int w, int h)
		{
			ImFontAtlasTextureRepackNative(atlas, w, h);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureRepack(ref ImFontAtlas atlas, int w, int h)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureRepackNative((ImFontAtlas*)patlas, w, h);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureGrowNative(ImFontAtlas* atlas, int oldW, int oldH)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, void>)funcTable[1481])(atlas, oldW, oldH);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)funcTable[1481])((nint)atlas, oldW, oldH);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ImFontAtlasPtr atlas, int oldW, int oldH)
		{
			ImFontAtlasTextureGrowNative(atlas, oldW, oldH);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ImFontAtlasPtr atlas, int oldW)
		{
			ImFontAtlasTextureGrowNative(atlas, oldW, (int)(-1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureGrowNative(atlas, (int)(-1), (int)(-1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ref ImFontAtlas atlas, int oldW, int oldH)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGrowNative((ImFontAtlas*)patlas, oldW, oldH);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ref ImFontAtlas atlas, int oldW)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGrowNative((ImFontAtlas*)patlas, oldW, (int)(-1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGrowNative((ImFontAtlas*)patlas, (int)(-1), (int)(-1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureCompactNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1482])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1482])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureCompact(ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureCompactNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureCompact(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureCompactNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureGetSizeEstimateNative(ImVec2I* pOut, ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec2I*, ImFontAtlas*, void>)funcTable[1483])(pOut, atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1483])((nint)pOut, (nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2I ImFontAtlasTextureGetSizeEstimate(ImFontAtlasPtr atlas)
		{
			ImVec2I ret;
			ImFontAtlasTextureGetSizeEstimateNative(&ret, atlas);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ImVec2IPtr pOut, ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureGetSizeEstimateNative(pOut, atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ref ImVec2I pOut, ImFontAtlasPtr atlas)
		{
			fixed (ImVec2I* ppOut = &pOut)
			{
				ImFontAtlasTextureGetSizeEstimateNative((ImVec2I*)ppOut, atlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2I ImFontAtlasTextureGetSizeEstimate(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImVec2I ret;
				ImFontAtlasTextureGetSizeEstimateNative(&ret, (ImFontAtlas*)patlas);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ImVec2IPtr pOut, ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGetSizeEstimateNative(pOut, (ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ref ImVec2I pOut, ref ImFontAtlas atlas)
		{
			fixed (ImVec2I* ppOut = &pOut)
			{
				fixed (ImFontAtlas* patlas = &atlas)
				{
					ImFontAtlasTextureGetSizeEstimateNative((ImVec2I*)ppOut, (ImFontAtlas*)patlas);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildSetupFontSpecialGlyphsNative(ImFontAtlas* atlas, ImFont* font, ImFontConfig* src)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontConfig*, void>)funcTable[1484])(atlas, font, src);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1484])((nint)atlas, (nint)font, (nint)src);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr src)
		{
			ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, font, src);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ImFontPtr font, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, font, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ref ImFont font, ImFontConfigPtr src)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, (ImFont*)pfont, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ref ImFont font, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, (ImFont*)pfont, src);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontConfig src)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, font, (ImFontConfig*)psrc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, font, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontConfig src)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, (ImFont*)pfont, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ref ImFont font, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontConfig*)psrc);
					}
				}
			}
		}

		/// <summary>
		/// Legacy<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildLegacyPreloadAllGlyphRangesNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1485])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1485])((nint)atlas);
			#endif
		}

		/// <summary>
		/// Legacy<br/>
		/// </summary>
		public static void ImFontAtlasBuildLegacyPreloadAllGlyphRanges(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildLegacyPreloadAllGlyphRangesNative(atlas);
		}

		/// <summary>
		/// Legacy<br/>
		/// </summary>
		public static void ImFontAtlasBuildLegacyPreloadAllGlyphRanges(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildLegacyPreloadAllGlyphRangesNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildGetOversampleFactorsNative(ImFontConfig* src, ImFontBaked* baked, int* outOversampleH, int* outOversampleV)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontConfig*, ImFontBaked*, int*, int*, void>)funcTable[1486])(src, baked, outOversampleH, outOversampleV);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[1486])((nint)src, (nint)baked, (nint)outOversampleH, (nint)outOversampleV);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, int* outOversampleH, int* outOversampleV)
		{
			ImFontAtlasBuildGetOversampleFactorsNative(src, baked, outOversampleH, outOversampleV);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, int* outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, outOversampleH, outOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ref ImFontBaked baked, int* outOversampleH, int* outOversampleV)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontAtlasBuildGetOversampleFactorsNative(src, (ImFontBaked*)pbaked, outOversampleH, outOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ref ImFontBaked baked, int* outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, (ImFontBaked*)pbaked, outOversampleH, outOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (int* poutOversampleH = &outOversampleH)
			{
				ImFontAtlasBuildGetOversampleFactorsNative(src, baked, (int*)poutOversampleH, outOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (int* poutOversampleH = &outOversampleH)
				{
					ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, (int*)poutOversampleH, outOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ref ImFontBaked baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (int* poutOversampleH = &outOversampleH)
				{
					ImFontAtlasBuildGetOversampleFactorsNative(src, (ImFontBaked*)pbaked, (int*)poutOversampleH, outOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ref ImFontBaked baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (int* poutOversampleH = &outOversampleH)
					{
						ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, (ImFontBaked*)pbaked, (int*)poutOversampleH, outOversampleV);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, int* outOversampleH, ref int outOversampleV)
		{
			fixed (int* poutOversampleV = &outOversampleV)
			{
				ImFontAtlasBuildGetOversampleFactorsNative(src, baked, outOversampleH, (int*)poutOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, int* outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (int* poutOversampleV = &outOversampleV)
				{
					ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, outOversampleH, (int*)poutOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ref ImFontBaked baked, int* outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (int* poutOversampleV = &outOversampleV)
				{
					ImFontAtlasBuildGetOversampleFactorsNative(src, (ImFontBaked*)pbaked, outOversampleH, (int*)poutOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ref ImFontBaked baked, int* outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (int* poutOversampleV = &outOversampleV)
					{
						ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, (ImFontBaked*)pbaked, outOversampleH, (int*)poutOversampleV);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, ref int outOversampleH, ref int outOversampleV)
		{
			fixed (int* poutOversampleH = &outOversampleH)
			{
				fixed (int* poutOversampleV = &outOversampleV)
				{
					ImFontAtlasBuildGetOversampleFactorsNative(src, baked, (int*)poutOversampleH, (int*)poutOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, ref int outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (int* poutOversampleH = &outOversampleH)
				{
					fixed (int* poutOversampleV = &outOversampleV)
					{
						ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, (int*)poutOversampleH, (int*)poutOversampleV);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ref ImFontBaked baked, ref int outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (int* poutOversampleH = &outOversampleH)
				{
					fixed (int* poutOversampleV = &outOversampleV)
					{
						ImFontAtlasBuildGetOversampleFactorsNative(src, (ImFontBaked*)pbaked, (int*)poutOversampleH, (int*)poutOversampleV);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ref ImFontBaked baked, ref int outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (int* poutOversampleH = &outOversampleH)
					{
						fixed (int* poutOversampleV = &outOversampleV)
						{
							ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, (ImFontBaked*)pbaked, (int*)poutOversampleH, (int*)poutOversampleV);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildDiscardBakesNative(ImFontAtlas* atlas, int unusedFrames)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, void>)funcTable[1487])(atlas, unusedFrames);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[1487])((nint)atlas, unusedFrames);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildDiscardBakes(ImFontAtlasPtr atlas, int unusedFrames)
		{
			ImFontAtlasBuildDiscardBakesNative(atlas, unusedFrames);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildDiscardBakes(ref ImFontAtlas atlas, int unusedFrames)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildDiscardBakesNative((ImFontAtlas*)patlas, unusedFrames);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImFontAtlasFontSourceInitNative(ImFontAtlas* atlas, ImFontConfig* src)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontConfig*, byte>)funcTable[1488])(atlas, src);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[1488])((nint)atlas, (nint)src);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImFontAtlasFontSourceInit(ImFontAtlasPtr atlas, ImFontConfigPtr src)
		{
			byte ret = ImFontAtlasFontSourceInitNative(atlas, src);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImFontAtlasFontSourceInit(ref ImFontAtlas atlas, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte ret = ImFontAtlasFontSourceInitNative((ImFontAtlas*)patlas, src);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImFontAtlasFontSourceInit(ImFontAtlasPtr atlas, ref ImFontConfig src)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				byte ret = ImFontAtlasFontSourceInitNative(atlas, (ImFontConfig*)psrc);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImFontAtlasFontSourceInit(ref ImFontAtlas atlas, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					byte ret = ImFontAtlasFontSourceInitNative((ImFontAtlas*)patlas, (ImFontConfig*)psrc);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasFontSourceAddToFontNative(ImFontAtlas* atlas, ImFont* font, ImFontConfig* src)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontConfig*, void>)funcTable[1489])(atlas, font, src);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1489])((nint)atlas, (nint)font, (nint)src);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr src)
		{
			ImFontAtlasFontSourceAddToFontNative(atlas, font, src);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ref ImFontAtlas atlas, ImFontPtr font, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasFontSourceAddToFontNative((ImFontAtlas*)patlas, font, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ImFontAtlasPtr atlas, ref ImFont font, ImFontConfigPtr src)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasFontSourceAddToFontNative(atlas, (ImFont*)pfont, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ref ImFontAtlas atlas, ref ImFont font, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasFontSourceAddToFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, src);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontConfig src)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasFontSourceAddToFontNative(atlas, font, (ImFontConfig*)psrc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasFontSourceAddToFontNative((ImFontAtlas*)patlas, font, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontConfig src)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasFontSourceAddToFontNative(atlas, (ImFont*)pfont, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontSourceAddToFont(ref ImFontAtlas atlas, ref ImFont font, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						ImFontAtlasFontSourceAddToFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontConfig*)psrc);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasFontDestroySourceDataNative(ImFontAtlas* atlas, ImFontConfig* src)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontConfig*, void>)funcTable[1490])(atlas, src);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1490])((nint)atlas, (nint)src);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroySourceData(ImFontAtlasPtr atlas, ImFontConfigPtr src)
		{
			ImFontAtlasFontDestroySourceDataNative(atlas, src);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroySourceData(ref ImFontAtlas atlas, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasFontDestroySourceDataNative((ImFontAtlas*)patlas, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroySourceData(ImFontAtlasPtr atlas, ref ImFontConfig src)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasFontDestroySourceDataNative(atlas, (ImFontConfig*)psrc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroySourceData(ref ImFontAtlas atlas, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasFontDestroySourceDataNative((ImFontAtlas*)patlas, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// Using FontDestroyOutputFontInitOutput sequence useful notably if font loader params have changed<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImFontAtlasFontInitOutputNative(ImFontAtlas* atlas, ImFont* font)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, byte>)funcTable[1491])(atlas, font);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[1491])((nint)atlas, (nint)font);
			#endif
		}

		/// <summary>
		/// Using FontDestroyOutputFontInitOutput sequence useful notably if font loader params have changed<br/>
		/// </summary>
		public static bool ImFontAtlasFontInitOutput(ImFontAtlasPtr atlas, ImFontPtr font)
		{
			byte ret = ImFontAtlasFontInitOutputNative(atlas, font);
			return ret != 0;
		}

		/// <summary>
		/// Using FontDestroyOutputFontInitOutput sequence useful notably if font loader params have changed<br/>
		/// </summary>
		public static bool ImFontAtlasFontInitOutput(ref ImFontAtlas atlas, ImFontPtr font)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte ret = ImFontAtlasFontInitOutputNative((ImFontAtlas*)patlas, font);
				return ret != 0;
			}
		}

		/// <summary>
		/// Using FontDestroyOutputFontInitOutput sequence useful notably if font loader params have changed<br/>
		/// </summary>
		public static bool ImFontAtlasFontInitOutput(ImFontAtlasPtr atlas, ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				byte ret = ImFontAtlasFontInitOutputNative(atlas, (ImFont*)pfont);
				return ret != 0;
			}
		}

		/// <summary>
		/// Using FontDestroyOutputFontInitOutput sequence useful notably if font loader params have changed<br/>
		/// </summary>
		public static bool ImFontAtlasFontInitOutput(ref ImFontAtlas atlas, ref ImFont font)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					byte ret = ImFontAtlasFontInitOutputNative((ImFontAtlas*)patlas, (ImFont*)pfont);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasFontDestroyOutputNative(ImFontAtlas* atlas, ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, void>)funcTable[1492])(atlas, font);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1492])((nint)atlas, (nint)font);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroyOutput(ImFontAtlasPtr atlas, ImFontPtr font)
		{
			ImFontAtlasFontDestroyOutputNative(atlas, font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroyOutput(ref ImFontAtlas atlas, ImFontPtr font)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasFontDestroyOutputNative((ImFontAtlas*)patlas, font);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroyOutput(ImFontAtlasPtr atlas, ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasFontDestroyOutputNative(atlas, (ImFont*)pfont);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDestroyOutput(ref ImFontAtlas atlas, ref ImFont font)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasFontDestroyOutputNative((ImFontAtlas*)patlas, (ImFont*)pfont);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasFontDiscardBakesNative(ImFontAtlas* atlas, ImFont* font, int unusedFrames)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, int, void>)funcTable[1493])(atlas, font, unusedFrames);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[1493])((nint)atlas, (nint)font, unusedFrames);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDiscardBakes(ImFontAtlasPtr atlas, ImFontPtr font, int unusedFrames)
		{
			ImFontAtlasFontDiscardBakesNative(atlas, font, unusedFrames);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDiscardBakes(ref ImFontAtlas atlas, ImFontPtr font, int unusedFrames)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasFontDiscardBakesNative((ImFontAtlas*)patlas, font, unusedFrames);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDiscardBakes(ImFontAtlasPtr atlas, ref ImFont font, int unusedFrames)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasFontDiscardBakesNative(atlas, (ImFont*)pfont, unusedFrames);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasFontDiscardBakes(ref ImFontAtlas atlas, ref ImFont font, int unusedFrames)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasFontDiscardBakesNative((ImFontAtlas*)patlas, (ImFont*)pfont, unusedFrames);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ImFontAtlasBakedGetIdNative(uint fontId, float bakedSize, float rasterizerDensity)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, float, float, uint>)funcTable[1494])(fontId, bakedSize, rasterizerDensity);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, float, float, uint>)funcTable[1494])(fontId, bakedSize, rasterizerDensity);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint ImFontAtlasBakedGetId(uint fontId, float bakedSize, float rasterizerDensity)
		{
			uint ret = ImFontAtlasBakedGetIdNative(fontId, bakedSize, rasterizerDensity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontBaked* ImFontAtlasBakedGetOrAddNative(ImFontAtlas* atlas, ImFont* font, float fontSize, float fontRasterizerDensity)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, float, float, ImFontBaked*>)funcTable[1495])(atlas, font, fontSize, fontRasterizerDensity);
			#else
			return (ImFontBaked*)((delegate* unmanaged[Cdecl]<nint, nint, float, float, nint>)funcTable[1495])((nint)atlas, (nint)font, fontSize, fontRasterizerDensity);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetOrAdd(ImFontAtlasPtr atlas, ImFontPtr font, float fontSize, float fontRasterizerDensity)
		{
			ImFontBakedPtr ret = ImFontAtlasBakedGetOrAddNative(atlas, font, fontSize, fontRasterizerDensity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetOrAdd(ref ImFontAtlas atlas, ImFontPtr font, float fontSize, float fontRasterizerDensity)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontBakedPtr ret = ImFontAtlasBakedGetOrAddNative((ImFontAtlas*)patlas, font, fontSize, fontRasterizerDensity);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetOrAdd(ImFontAtlasPtr atlas, ref ImFont font, float fontSize, float fontRasterizerDensity)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontBakedPtr ret = ImFontAtlasBakedGetOrAddNative(atlas, (ImFont*)pfont, fontSize, fontRasterizerDensity);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetOrAdd(ref ImFontAtlas atlas, ref ImFont font, float fontSize, float fontRasterizerDensity)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontBakedPtr ret = ImFontAtlasBakedGetOrAddNative((ImFontAtlas*)patlas, (ImFont*)pfont, fontSize, fontRasterizerDensity);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontBaked* ImFontAtlasBakedGetClosestMatchNative(ImFontAtlas* atlas, ImFont* font, float fontSize, float fontRasterizerDensity)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, float, float, ImFontBaked*>)funcTable[1496])(atlas, font, fontSize, fontRasterizerDensity);
			#else
			return (ImFontBaked*)((delegate* unmanaged[Cdecl]<nint, nint, float, float, nint>)funcTable[1496])((nint)atlas, (nint)font, fontSize, fontRasterizerDensity);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetClosestMatch(ImFontAtlasPtr atlas, ImFontPtr font, float fontSize, float fontRasterizerDensity)
		{
			ImFontBakedPtr ret = ImFontAtlasBakedGetClosestMatchNative(atlas, font, fontSize, fontRasterizerDensity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetClosestMatch(ref ImFontAtlas atlas, ImFontPtr font, float fontSize, float fontRasterizerDensity)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontBakedPtr ret = ImFontAtlasBakedGetClosestMatchNative((ImFontAtlas*)patlas, font, fontSize, fontRasterizerDensity);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetClosestMatch(ImFontAtlasPtr atlas, ref ImFont font, float fontSize, float fontRasterizerDensity)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontBakedPtr ret = ImFontAtlasBakedGetClosestMatchNative(atlas, (ImFont*)pfont, fontSize, fontRasterizerDensity);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedGetClosestMatch(ref ImFontAtlas atlas, ref ImFont font, float fontSize, float fontRasterizerDensity)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontBakedPtr ret = ImFontAtlasBakedGetClosestMatchNative((ImFontAtlas*)patlas, (ImFont*)pfont, fontSize, fontRasterizerDensity);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontBaked* ImFontAtlasBakedAddNative(ImFontAtlas* atlas, ImFont* font, float fontSize, float fontRasterizerDensity, uint bakedId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, float, float, uint, ImFontBaked*>)funcTable[1497])(atlas, font, fontSize, fontRasterizerDensity, bakedId);
			#else
			return (ImFontBaked*)((delegate* unmanaged[Cdecl]<nint, nint, float, float, uint, nint>)funcTable[1497])((nint)atlas, (nint)font, fontSize, fontRasterizerDensity, bakedId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedAdd(ImFontAtlasPtr atlas, ImFontPtr font, float fontSize, float fontRasterizerDensity, uint bakedId)
		{
			ImFontBakedPtr ret = ImFontAtlasBakedAddNative(atlas, font, fontSize, fontRasterizerDensity, bakedId);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedAdd(ref ImFontAtlas atlas, ImFontPtr font, float fontSize, float fontRasterizerDensity, uint bakedId)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontBakedPtr ret = ImFontAtlasBakedAddNative((ImFontAtlas*)patlas, font, fontSize, fontRasterizerDensity, bakedId);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedAdd(ImFontAtlasPtr atlas, ref ImFont font, float fontSize, float fontRasterizerDensity, uint bakedId)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontBakedPtr ret = ImFontAtlasBakedAddNative(atlas, (ImFont*)pfont, fontSize, fontRasterizerDensity, bakedId);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBakedPtr ImFontAtlasBakedAdd(ref ImFontAtlas atlas, ref ImFont font, float fontSize, float fontRasterizerDensity, uint bakedId)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontBakedPtr ret = ImFontAtlasBakedAddNative((ImFontAtlas*)patlas, (ImFont*)pfont, fontSize, fontRasterizerDensity, bakedId);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBakedDiscardNative(ImFontAtlas* atlas, ImFont* font, ImFontBaked* baked)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontBaked*, void>)funcTable[1498])(atlas, font, baked);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1498])((nint)atlas, (nint)font, (nint)baked);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ImFontAtlasPtr atlas, ImFontPtr font, ImFontBakedPtr baked)
		{
			ImFontAtlasBakedDiscardNative(atlas, font, baked);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ref ImFontAtlas atlas, ImFontPtr font, ImFontBakedPtr baked)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBakedDiscardNative((ImFontAtlas*)patlas, font, baked);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ImFontAtlasPtr atlas, ref ImFont font, ImFontBakedPtr baked)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBakedDiscardNative(atlas, (ImFont*)pfont, baked);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ref ImFontAtlas atlas, ref ImFont font, ImFontBakedPtr baked)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBakedDiscardNative((ImFontAtlas*)patlas, (ImFont*)pfont, baked);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontBaked baked)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontAtlasBakedDiscardNative(atlas, font, (ImFontBaked*)pbaked);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontBaked baked)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBakedDiscardNative((ImFontAtlas*)patlas, font, (ImFontBaked*)pbaked);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontBaked baked)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBakedDiscardNative(atlas, (ImFont*)pfont, (ImFontBaked*)pbaked);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscard(ref ImFontAtlas atlas, ref ImFont font, ref ImFontBaked baked)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontBaked* pbaked = &baked)
					{
						ImFontAtlasBakedDiscardNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontBaked*)pbaked);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontGlyph* ImFontAtlasBakedAddFontGlyphNative(ImFontAtlas* atlas, ImFontBaked* baked, ImFontConfig* src, ImFontGlyph* inGlyph)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontBaked*, ImFontConfig*, ImFontGlyph*, ImFontGlyph*>)funcTable[1499])(atlas, baked, src, inGlyph);
			#else
			return (ImFontGlyph*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint>)funcTable[1499])((nint)atlas, (nint)baked, (nint)src, (nint)inGlyph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr inGlyph)
		{
			ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, baked, src, inGlyph);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, baked, src, inGlyph);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, (ImFontBaked*)pbaked, src, inGlyph);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, inGlyph);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, baked, (ImFontConfig*)psrc, inGlyph);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, inGlyph);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, inGlyph);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, inGlyph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontGlyph* pinGlyph = &inGlyph)
			{
				ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, baked, src, (ImFontGlyph*)pinGlyph);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontGlyph* pinGlyph = &inGlyph)
				{
					ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, baked, src, (ImFontGlyph*)pinGlyph);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontGlyph* pinGlyph = &inGlyph)
				{
					ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pinGlyph);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pinGlyph = &inGlyph)
					{
						ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pinGlyph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontGlyph* pinGlyph = &inGlyph)
				{
					ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pinGlyph);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pinGlyph = &inGlyph)
					{
						ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pinGlyph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pinGlyph = &inGlyph)
					{
						ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pinGlyph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontGlyphPtr ImFontAtlasBakedAddFontGlyph(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph inGlyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (ImFontGlyph* pinGlyph = &inGlyph)
						{
							ImFontGlyphPtr ret = ImFontAtlasBakedAddFontGlyphNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pinGlyph);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBakedAddFontGlyphAdvancedXNative(ImFontAtlas* atlas, ImFontBaked* baked, ImFontConfig* src, uint codepoint, float advanceX)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontBaked*, ImFontConfig*, uint, float, void>)funcTable[1500])(atlas, baked, src, codepoint, advanceX);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, uint, float, void>)funcTable[1500])((nint)atlas, (nint)baked, (nint)src, codepoint, advanceX);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, uint codepoint, float advanceX)
		{
			ImFontAtlasBakedAddFontGlyphAdvancedXNative(atlas, baked, src, codepoint, advanceX);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, uint codepoint, float advanceX)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBakedAddFontGlyphAdvancedXNative((ImFontAtlas*)patlas, baked, src, codepoint, advanceX);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, uint codepoint, float advanceX)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontAtlasBakedAddFontGlyphAdvancedXNative(atlas, (ImFontBaked*)pbaked, src, codepoint, advanceX);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, uint codepoint, float advanceX)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBakedAddFontGlyphAdvancedXNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, codepoint, advanceX);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, uint codepoint, float advanceX)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasBakedAddFontGlyphAdvancedXNative(atlas, baked, (ImFontConfig*)psrc, codepoint, advanceX);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, uint codepoint, float advanceX)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBakedAddFontGlyphAdvancedXNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, codepoint, advanceX);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, uint codepoint, float advanceX)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBakedAddFontGlyphAdvancedXNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, codepoint, advanceX);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedAddFontGlyphAdvancedX(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, uint codepoint, float advanceX)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						ImFontAtlasBakedAddFontGlyphAdvancedXNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, codepoint, advanceX);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBakedDiscardFontGlyphNative(ImFontAtlas* atlas, ImFont* font, ImFontBaked* baked, ImFontGlyph* glyph)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontBaked*, ImFontGlyph*, void>)funcTable[1501])(atlas, font, baked, glyph);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[1501])((nint)atlas, (nint)font, (nint)baked, (nint)glyph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ImFontPtr font, ImFontBakedPtr baked, ImFontGlyphPtr glyph)
		{
			ImFontAtlasBakedDiscardFontGlyphNative(atlas, font, baked, glyph);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ImFontPtr font, ImFontBakedPtr baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, font, baked, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ref ImFont font, ImFontBakedPtr baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBakedDiscardFontGlyphNative(atlas, (ImFont*)pfont, baked, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ref ImFont font, ImFontBakedPtr baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, (ImFont*)pfont, baked, glyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontBaked baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontAtlasBakedDiscardFontGlyphNative(atlas, font, (ImFontBaked*)pbaked, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontBaked baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, font, (ImFontBaked*)pbaked, glyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontBaked baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBakedDiscardFontGlyphNative(atlas, (ImFont*)pfont, (ImFontBaked*)pbaked, glyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ref ImFont font, ref ImFontBaked baked, ImFontGlyphPtr glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontBaked* pbaked = &baked)
					{
						ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontBaked*)pbaked, glyph);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ImFontPtr font, ImFontBakedPtr baked, ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				ImFontAtlasBakedDiscardFontGlyphNative(atlas, font, baked, (ImFontGlyph*)pglyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ImFontPtr font, ImFontBakedPtr baked, ref ImFontGlyph glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, font, baked, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ref ImFont font, ImFontBakedPtr baked, ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					ImFontAtlasBakedDiscardFontGlyphNative(atlas, (ImFont*)pfont, baked, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ref ImFont font, ImFontBakedPtr baked, ref ImFontGlyph glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, (ImFont*)pfont, baked, (ImFontGlyph*)pglyph);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontBaked baked, ref ImFontGlyph glyph)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					ImFontAtlasBakedDiscardFontGlyphNative(atlas, font, (ImFontBaked*)pbaked, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontBaked baked, ref ImFontGlyph glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, font, (ImFontBaked*)pbaked, (ImFontGlyph*)pglyph);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontBaked baked, ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						ImFontAtlasBakedDiscardFontGlyphNative(atlas, (ImFont*)pfont, (ImFontBaked*)pbaked, (ImFontGlyph*)pglyph);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedDiscardFontGlyph(ref ImFontAtlas atlas, ref ImFont font, ref ImFontBaked baked, ref ImFontGlyph glyph)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontBaked* pbaked = &baked)
					{
						fixed (ImFontGlyph* pglyph = &glyph)
						{
							ImFontAtlasBakedDiscardFontGlyphNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontBaked*)pbaked, (ImFontGlyph*)pglyph);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBakedSetFontGlyphBitmapNative(ImFontAtlas* atlas, ImFontBaked* baked, ImFontConfig* src, ImFontGlyph* glyph, ImTextureRect* r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontBaked*, ImFontConfig*, ImFontGlyph*, ImTextureRect*, byte*, ImTextureFormat, int, void>)funcTable[1502])(atlas, baked, src, glyph, r, srcPixels, srcFmt, srcPitch);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, nint, ImTextureFormat, int, void>)funcTable[1502])((nint)atlas, (nint)baked, (nint)src, (nint)glyph, (nint)r, (nint)srcPixels, srcFmt, srcPitch);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, glyph, r, srcPixels, srcFmt, srcPitch);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, glyph, r, srcPixels, srcFmt, srcPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, glyph, r, srcPixels, srcFmt, srcPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, glyph, r, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, glyph, r, srcPixels, srcFmt, srcPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, glyph, r, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, r, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, r, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (ImFontGlyph* pglyph = &glyph)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, srcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImTextureRect* pr = &r)
			{
				ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImTextureRect* pr = &r)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImTextureRect* pr = &r)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImTextureRect* pr = &r)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImTextureRect* pr = &r)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImTextureRect* pr = &r)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImTextureRect* pr = &r)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (ImTextureRect* pr = &r)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				fixed (ImTextureRect* pr = &r)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (ImTextureRect* pr = &r)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (ImTextureRect* pr = &r)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (ImTextureRect* pr = &r)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (ImTextureRect* pr = &r)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (ImTextureRect* pr = &r)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (ImTextureRect* pr = &r)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, byte* srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (ImFontGlyph* pglyph = &glyph)
						{
							fixed (ImTextureRect* pr = &r)
							{
								ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, srcPixels, srcFmt, srcPitch);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (byte* psrcPixels = &srcPixels)
			{
				ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* psrcPixels = &srcPixels)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (byte* psrcPixels = &srcPixels)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (byte* psrcPixels = &srcPixels)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				fixed (byte* psrcPixels = &srcPixels)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ImTextureRectPtr r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (ImFontGlyph* pglyph = &glyph)
						{
							fixed (byte* psrcPixels = &srcPixels)
							{
								ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, r, (byte*)psrcPixels, srcFmt, srcPitch);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImTextureRect* pr = &r)
			{
				fixed (byte* psrcPixels = &srcPixels)
				{
					ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImTextureRect* pr = &r)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImTextureRect* pr = &r)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImTextureRect* pr = &r)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImTextureRect* pr = &r)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImTextureRect* pr = &r)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImTextureRect* pr = &r)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ref ImFontConfig src, ImFontGlyphPtr glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						fixed (ImTextureRect* pr = &r)
						{
							fixed (byte* psrcPixels = &srcPixels)
							{
								ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, glyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				fixed (ImTextureRect* pr = &r)
				{
					fixed (byte* psrcPixels = &srcPixels)
					{
						ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (ImTextureRect* pr = &r)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (ImTextureRect* pr = &r)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ref ImFontBaked baked, ImFontConfigPtr src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (ImTextureRect* pr = &r)
						{
							fixed (byte* psrcPixels = &srcPixels)
							{
								ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, (ImFontBaked*)pbaked, src, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					fixed (ImTextureRect* pr = &r)
					{
						fixed (byte* psrcPixels = &srcPixels)
						{
							ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ref ImFontAtlas atlas, ImFontBakedPtr baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (ImTextureRect* pr = &r)
						{
							fixed (byte* psrcPixels = &srcPixels)
							{
								ImFontAtlasBakedSetFontGlyphBitmapNative((ImFontAtlas*)patlas, baked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBakedSetFontGlyphBitmap(ImFontAtlasPtr atlas, ref ImFontBaked baked, ref ImFontConfig src, ref ImFontGlyph glyph, ref ImTextureRect r, ref byte srcPixels, ImTextureFormat srcFmt, int srcPitch)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					fixed (ImFontGlyph* pglyph = &glyph)
					{
						fixed (ImTextureRect* pr = &r)
						{
							fixed (byte* psrcPixels = &srcPixels)
							{
								ImFontAtlasBakedSetFontGlyphBitmapNative(atlas, (ImFontBaked*)pbaked, (ImFontConfig*)psrc, (ImFontGlyph*)pglyph, (ImTextureRect*)pr, (byte*)psrcPixels, srcFmt, srcPitch);
							}
						}
					}
				}
			}
		}
	}
}
