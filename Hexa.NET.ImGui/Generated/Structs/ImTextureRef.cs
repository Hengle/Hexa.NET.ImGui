// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImTextureRef
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImTextureData* TexData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImTextureID TexID;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImTextureRef(ImTextureData* texData = default, ImTextureID texId = default)
		{
			TexData = texData;
			TexID = texId;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImTextureRef* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// == (_TexData ? _TexData-&gt;TexID : _TexID)  Implemented below in the file.<br/>
		/// </summary>
		public unsafe ImTextureID GetTexID()
		{
			fixed (ImTextureRef* @this = &this)
			{
				ImTextureID ret = ImGui.GetTexIDNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImTextureRefPtr : IEquatable<ImTextureRefPtr>
	{
		public ImTextureRefPtr(ImTextureRef* handle) { Handle = handle; }

		public ImTextureRef* Handle;

		public bool IsNull => Handle == null;

		public static ImTextureRefPtr Null => new ImTextureRefPtr(null);

		public ImTextureRef this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImTextureRefPtr(ImTextureRef* handle) => new ImTextureRefPtr(handle);

		public static implicit operator ImTextureRef*(ImTextureRefPtr handle) => handle.Handle;

		public static bool operator ==(ImTextureRefPtr left, ImTextureRefPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImTextureRefPtr left, ImTextureRefPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImTextureRefPtr left, ImTextureRef* right) => left.Handle == right;

		public static bool operator !=(ImTextureRefPtr left, ImTextureRef* right) => left.Handle != right;

		public bool Equals(ImTextureRefPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImTextureRefPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImTextureRefPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImTextureDataPtr TexData => ref Unsafe.AsRef<ImTextureDataPtr>(&Handle->TexData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImTextureID TexID => ref Unsafe.AsRef<ImTextureID>(&Handle->TexID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

		/// <summary>
		/// == (_TexData ? _TexData-&gt;TexID : _TexID)  Implemented below in the file.<br/>
		/// </summary>
		public unsafe ImTextureID GetTexID()
		{
			ImTextureID ret = ImGui.GetTexIDNative(Handle);
			return ret;
		}

	}

}
