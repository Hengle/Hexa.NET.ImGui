// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Hooks and storage for a given font backend.<br/>
	/// This structure is likely to evolve as we add support for incremental atlas updates.<br/>
	/// Conceptually this could be public, but API is still going to be evolve.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontLoader
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* LoaderInit;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* LoaderShutdown;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* FontSrcInit;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* FontSrcDestroy;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* FontSrcContainsGlyph;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* FontBakedInit;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* FontBakedDestroy;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* FontBakedLoadGlyph;

		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint FontBakedSrcLoaderDataSize;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontLoader(byte* name = default, delegate*<ImFontAtlas*, bool> loaderInit = default, delegate*<ImFontAtlas*, void> loaderShutdown = default, delegate*<ImFontAtlas*, ImFontConfig*, bool> fontSrcInit = default, delegate*<ImFontAtlas*, ImFontConfig*, void> fontSrcDestroy = default, delegate*<ImFontAtlas*, ImFontConfig*, uint, bool> fontSrcContainsGlyph = default, delegate*<ImFontAtlas*, ImFontConfig*, ImFontBaked*, void*, bool> fontBakedInit = default, delegate*<ImFontAtlas*, ImFontConfig*, ImFontBaked*, void*, void> fontBakedDestroy = default, delegate*<ImFontAtlas*, ImFontConfig*, ImFontBaked*, void*, uint, ImFontGlyph*, float*, bool> fontBakedLoadGlyph = default, nuint fontBakedSrcLoaderDataSize = default)
		{
			Name = name;
			LoaderInit = (void*)loaderInit;
			LoaderShutdown = (void*)loaderShutdown;
			FontSrcInit = (void*)fontSrcInit;
			FontSrcDestroy = (void*)fontSrcDestroy;
			FontSrcContainsGlyph = (void*)fontSrcContainsGlyph;
			FontBakedInit = (void*)fontBakedInit;
			FontBakedDestroy = (void*)fontBakedDestroy;
			FontBakedLoadGlyph = (void*)fontBakedLoadGlyph;
			FontBakedSrcLoaderDataSize = fontBakedSrcLoaderDataSize;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontLoaderPtr : IEquatable<ImFontLoaderPtr>
	{
		public ImFontLoaderPtr(ImFontLoader* handle) { Handle = handle; }

		public ImFontLoader* Handle;

		public bool IsNull => Handle == null;

		public static ImFontLoaderPtr Null => new ImFontLoaderPtr(null);

		public ImFontLoader this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontLoaderPtr(ImFontLoader* handle) => new ImFontLoaderPtr(handle);

		public static implicit operator ImFontLoader*(ImFontLoaderPtr handle) => handle.Handle;

		public static bool operator ==(ImFontLoaderPtr left, ImFontLoaderPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontLoaderPtr left, ImFontLoaderPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontLoaderPtr left, ImFontLoader* right) => left.Handle == right;

		public static bool operator !=(ImFontLoaderPtr left, ImFontLoader* right) => left.Handle != right;

		public bool Equals(ImFontLoaderPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontLoaderPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontLoaderPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* Name { get => Handle->Name; set => Handle->Name = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* LoaderInit { get => Handle->LoaderInit; set => Handle->LoaderInit = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* LoaderShutdown { get => Handle->LoaderShutdown; set => Handle->LoaderShutdown = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* FontSrcInit { get => Handle->FontSrcInit; set => Handle->FontSrcInit = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* FontSrcDestroy { get => Handle->FontSrcDestroy; set => Handle->FontSrcDestroy = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* FontSrcContainsGlyph { get => Handle->FontSrcContainsGlyph; set => Handle->FontSrcContainsGlyph = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* FontBakedInit { get => Handle->FontBakedInit; set => Handle->FontBakedInit = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* FontBakedDestroy { get => Handle->FontBakedDestroy; set => Handle->FontBakedDestroy = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* FontBakedLoadGlyph { get => Handle->FontBakedLoadGlyph; set => Handle->FontBakedLoadGlyph = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref nuint FontBakedSrcLoaderDataSize => ref Unsafe.AsRef<nuint>(&Handle->FontBakedSrcLoaderDataSize);
	}

}
