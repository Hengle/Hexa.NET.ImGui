// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Output of ImFontAtlas::GetCustomRect() when using custom rectangles.<br/>
	/// Those values may not be cachedstored as they are only valid for the current value of atlas-&gt;TexRef<br/>
	/// (this is in theory derived from ImTextureRect but we use separate structures for reasons)<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlasRect
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort X;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort Y;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort W;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort H;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Uv0;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Uv1;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlasRect(ushort x = default, ushort y = default, ushort w = default, ushort h = default, Vector2 uv0 = default, Vector2 uv1 = default)
		{
			X = x;
			Y = y;
			W = w;
			H = h;
			Uv0 = uv0;
			Uv1 = uv1;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImFontAtlasRect* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontAtlasRectPtr : IEquatable<ImFontAtlasRectPtr>
	{
		public ImFontAtlasRectPtr(ImFontAtlasRect* handle) { Handle = handle; }

		public ImFontAtlasRect* Handle;

		public bool IsNull => Handle == null;

		public static ImFontAtlasRectPtr Null => new ImFontAtlasRectPtr(null);

		public ImFontAtlasRect this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontAtlasRectPtr(ImFontAtlasRect* handle) => new ImFontAtlasRectPtr(handle);

		public static implicit operator ImFontAtlasRect*(ImFontAtlasRectPtr handle) => handle.Handle;

		public static bool operator ==(ImFontAtlasRectPtr left, ImFontAtlasRectPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontAtlasRectPtr left, ImFontAtlasRectPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontAtlasRectPtr left, ImFontAtlasRect* right) => left.Handle == right;

		public static bool operator !=(ImFontAtlasRectPtr left, ImFontAtlasRect* right) => left.Handle != right;

		public bool Equals(ImFontAtlasRectPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontAtlasRectPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontAtlasRectPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort X => ref Unsafe.AsRef<ushort>(&Handle->X);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort Y => ref Unsafe.AsRef<ushort>(&Handle->Y);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort W => ref Unsafe.AsRef<ushort>(&Handle->W);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort H => ref Unsafe.AsRef<ushort>(&Handle->H);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Uv0 => ref Unsafe.AsRef<Vector2>(&Handle->Uv0);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Uv1 => ref Unsafe.AsRef<Vector2>(&Handle->Uv1);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
