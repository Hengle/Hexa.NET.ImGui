// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Internal storage for incrementally packing and building a ImFontAtlas<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlasBuilder
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public StbrpContextOpaque PackContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<StbrpNode> PackNodes;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImTextureRect> Rects;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImFontAtlasRectEntry> RectsIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> TempBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int RectsIndexFreeListStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int RectsPackedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int RectsPackedSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int RectsDiscardedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int RectsDiscardedSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2I MaxRectSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2I MaxRectBounds;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LockDisableResize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PreloadedAllGlyphsRanges;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImStableVectorImFontBaked32 BakedPool;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStorage BakedMap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int BakedDiscardedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int PackIdMouseCursors;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int PackIdLinesTexData;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlasBuilder(StbrpContextOpaque packContext = default, ImVector<StbrpNode> packNodes = default, ImVector<ImTextureRect> rects = default, ImVector<ImFontAtlasRectEntry> rectsIndex = default, ImVector<byte> tempBuffer = default, int rectsIndexFreeListStart = default, int rectsPackedCount = default, int rectsPackedSurface = default, int rectsDiscardedCount = default, int rectsDiscardedSurface = default, int frameCount = default, ImVec2I maxRectSize = default, ImVec2I maxRectBounds = default, bool lockDisableResize = default, bool preloadedAllGlyphsRanges = default, ImStableVectorImFontBaked32 bakedPool = default, ImGuiStorage bakedMap = default, int bakedDiscardedCount = default, int packIdMouseCursors = default, int packIdLinesTexData = default)
		{
			PackContext = packContext;
			PackNodes = packNodes;
			Rects = rects;
			RectsIndex = rectsIndex;
			TempBuffer = tempBuffer;
			RectsIndexFreeListStart = rectsIndexFreeListStart;
			RectsPackedCount = rectsPackedCount;
			RectsPackedSurface = rectsPackedSurface;
			RectsDiscardedCount = rectsDiscardedCount;
			RectsDiscardedSurface = rectsDiscardedSurface;
			FrameCount = frameCount;
			MaxRectSize = maxRectSize;
			MaxRectBounds = maxRectBounds;
			LockDisableResize = lockDisableResize ? (byte)1 : (byte)0;
			PreloadedAllGlyphsRanges = preloadedAllGlyphsRanges ? (byte)1 : (byte)0;
			BakedPool = bakedPool;
			BakedMap = bakedMap;
			BakedDiscardedCount = bakedDiscardedCount;
			PackIdMouseCursors = packIdMouseCursors;
			PackIdLinesTexData = packIdLinesTexData;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontAtlasBuilderPtr : IEquatable<ImFontAtlasBuilderPtr>
	{
		public ImFontAtlasBuilderPtr(ImFontAtlasBuilder* handle) { Handle = handle; }

		public ImFontAtlasBuilder* Handle;

		public bool IsNull => Handle == null;

		public static ImFontAtlasBuilderPtr Null => new ImFontAtlasBuilderPtr(null);

		public ImFontAtlasBuilder this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontAtlasBuilderPtr(ImFontAtlasBuilder* handle) => new ImFontAtlasBuilderPtr(handle);

		public static implicit operator ImFontAtlasBuilder*(ImFontAtlasBuilderPtr handle) => handle.Handle;

		public static bool operator ==(ImFontAtlasBuilderPtr left, ImFontAtlasBuilderPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontAtlasBuilderPtr left, ImFontAtlasBuilderPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontAtlasBuilderPtr left, ImFontAtlasBuilder* right) => left.Handle == right;

		public static bool operator !=(ImFontAtlasBuilderPtr left, ImFontAtlasBuilder* right) => left.Handle != right;

		public bool Equals(ImFontAtlasBuilderPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontAtlasBuilderPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontAtlasBuilderPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref StbrpContextOpaque PackContext => ref Unsafe.AsRef<StbrpContextOpaque>(&Handle->PackContext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<StbrpNode> PackNodes => ref Unsafe.AsRef<ImVector<StbrpNode>>(&Handle->PackNodes);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImTextureRect> Rects => ref Unsafe.AsRef<ImVector<ImTextureRect>>(&Handle->Rects);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImFontAtlasRectEntry> RectsIndex => ref Unsafe.AsRef<ImVector<ImFontAtlasRectEntry>>(&Handle->RectsIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> TempBuffer => ref Unsafe.AsRef<ImVector<byte>>(&Handle->TempBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int RectsIndexFreeListStart => ref Unsafe.AsRef<int>(&Handle->RectsIndexFreeListStart);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int RectsPackedCount => ref Unsafe.AsRef<int>(&Handle->RectsPackedCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int RectsPackedSurface => ref Unsafe.AsRef<int>(&Handle->RectsPackedSurface);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int RectsDiscardedCount => ref Unsafe.AsRef<int>(&Handle->RectsDiscardedCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int RectsDiscardedSurface => ref Unsafe.AsRef<int>(&Handle->RectsDiscardedSurface);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCount => ref Unsafe.AsRef<int>(&Handle->FrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2I MaxRectSize => ref Unsafe.AsRef<ImVec2I>(&Handle->MaxRectSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2I MaxRectBounds => ref Unsafe.AsRef<ImVec2I>(&Handle->MaxRectBounds);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LockDisableResize => ref Unsafe.AsRef<bool>(&Handle->LockDisableResize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool PreloadedAllGlyphsRanges => ref Unsafe.AsRef<bool>(&Handle->PreloadedAllGlyphsRanges);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImStableVectorImFontBaked32 BakedPool => ref Unsafe.AsRef<ImStableVectorImFontBaked32>(&Handle->BakedPool);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStorage BakedMap => ref Unsafe.AsRef<ImGuiStorage>(&Handle->BakedMap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int BakedDiscardedCount => ref Unsafe.AsRef<int>(&Handle->BakedDiscardedCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int PackIdMouseCursors => ref Unsafe.AsRef<int>(&Handle->PackIdMouseCursors);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int PackIdLinesTexData => ref Unsafe.AsRef<int>(&Handle->PackIdLinesTexData);
	}

}
