// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Helper: ImVec2i (2D vector, integer)<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVec2I
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int X;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Y;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImVec2I(int x = default, int y = default)
		{
			X = x;
			Y = y;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImVec2IPtr : IEquatable<ImVec2IPtr>
	{
		public ImVec2IPtr(ImVec2I* handle) { Handle = handle; }

		public ImVec2I* Handle;

		public bool IsNull => Handle == null;

		public static ImVec2IPtr Null => new ImVec2IPtr(null);

		public ImVec2I this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImVec2IPtr(ImVec2I* handle) => new ImVec2IPtr(handle);

		public static implicit operator ImVec2I*(ImVec2IPtr handle) => handle.Handle;

		public static bool operator ==(ImVec2IPtr left, ImVec2IPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImVec2IPtr left, ImVec2IPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImVec2IPtr left, ImVec2I* right) => left.Handle == right;

		public static bool operator !=(ImVec2IPtr left, ImVec2I* right) => left.Handle != right;

		public bool Equals(ImVec2IPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImVec2IPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImVec2IPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int X => ref Unsafe.AsRef<int>(&Handle->X);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Y => ref Unsafe.AsRef<int>(&Handle->Y);
	}

}
