// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Coordinates of a rectangle within a texture.<br/>
	/// When a texture is in ImTextureStatus_WantUpdates state, we provide a list of individual rectangles to copy to the graphics system.<br/>
	/// You may use ImTextureData::Updates[] for the list, or ImTextureData::UpdateBox for a single bounding box.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImTextureRect
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort X;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort Y;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort W;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort H;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImTextureRect(ushort x = default, ushort y = default, ushort w = default, ushort h = default)
		{
			X = x;
			Y = y;
			W = w;
			H = h;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImTextureRectPtr : IEquatable<ImTextureRectPtr>
	{
		public ImTextureRectPtr(ImTextureRect* handle) { Handle = handle; }

		public ImTextureRect* Handle;

		public bool IsNull => Handle == null;

		public static ImTextureRectPtr Null => new ImTextureRectPtr(null);

		public ImTextureRect this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImTextureRectPtr(ImTextureRect* handle) => new ImTextureRectPtr(handle);

		public static implicit operator ImTextureRect*(ImTextureRectPtr handle) => handle.Handle;

		public static bool operator ==(ImTextureRectPtr left, ImTextureRectPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImTextureRectPtr left, ImTextureRectPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImTextureRectPtr left, ImTextureRect* right) => left.Handle == right;

		public static bool operator !=(ImTextureRectPtr left, ImTextureRect* right) => left.Handle != right;

		public bool Equals(ImTextureRectPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImTextureRectPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImTextureRectPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort X => ref Unsafe.AsRef<ushort>(&Handle->X);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort Y => ref Unsafe.AsRef<ushort>(&Handle->Y);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort W => ref Unsafe.AsRef<ushort>(&Handle->W);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort H => ref Unsafe.AsRef<ushort>(&Handle->H);
	}

}
