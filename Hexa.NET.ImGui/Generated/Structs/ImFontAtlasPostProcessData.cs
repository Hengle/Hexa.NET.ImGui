// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Data available to potential texture post-processing functions<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlasPostProcessData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlas* FontAtlas;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFont* Font;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontConfig* FontSrc;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontBaked* FontBaked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontGlyph* Glyph;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* Pixels;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImTextureFormat Format;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Pitch;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Height;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlasPostProcessData(ImFontAtlasPtr fontAtlas = default, ImFontPtr font = default, ImFontConfigPtr fontSrc = default, ImFontBakedPtr fontBaked = default, ImFontGlyphPtr glyph = default, void* pixels = default, ImTextureFormat format = default, int pitch = default, int width = default, int height = default)
		{
			FontAtlas = fontAtlas;
			Font = font;
			FontSrc = fontSrc;
			FontBaked = fontBaked;
			Glyph = glyph;
			Pixels = pixels;
			Format = format;
			Pitch = pitch;
			Width = width;
			Height = height;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontAtlasPostProcessDataPtr : IEquatable<ImFontAtlasPostProcessDataPtr>
	{
		public ImFontAtlasPostProcessDataPtr(ImFontAtlasPostProcessData* handle) { Handle = handle; }

		public ImFontAtlasPostProcessData* Handle;

		public bool IsNull => Handle == null;

		public static ImFontAtlasPostProcessDataPtr Null => new ImFontAtlasPostProcessDataPtr(null);

		public ImFontAtlasPostProcessData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontAtlasPostProcessDataPtr(ImFontAtlasPostProcessData* handle) => new ImFontAtlasPostProcessDataPtr(handle);

		public static implicit operator ImFontAtlasPostProcessData*(ImFontAtlasPostProcessDataPtr handle) => handle.Handle;

		public static bool operator ==(ImFontAtlasPostProcessDataPtr left, ImFontAtlasPostProcessDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontAtlasPostProcessDataPtr left, ImFontAtlasPostProcessDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontAtlasPostProcessDataPtr left, ImFontAtlasPostProcessData* right) => left.Handle == right;

		public static bool operator !=(ImFontAtlasPostProcessDataPtr left, ImFontAtlasPostProcessData* right) => left.Handle != right;

		public bool Equals(ImFontAtlasPostProcessDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontAtlasPostProcessDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontAtlasPostProcessDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontAtlasPtr FontAtlas => ref Unsafe.AsRef<ImFontAtlasPtr>(&Handle->FontAtlas);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontPtr Font => ref Unsafe.AsRef<ImFontPtr>(&Handle->Font);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontConfigPtr FontSrc => ref Unsafe.AsRef<ImFontConfigPtr>(&Handle->FontSrc);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontBakedPtr FontBaked => ref Unsafe.AsRef<ImFontBakedPtr>(&Handle->FontBaked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontGlyphPtr Glyph => ref Unsafe.AsRef<ImFontGlyphPtr>(&Handle->Glyph);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* Pixels { get => Handle->Pixels; set => Handle->Pixels = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImTextureFormat Format => ref Unsafe.AsRef<ImTextureFormat>(&Handle->Format);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Pitch => ref Unsafe.AsRef<int>(&Handle->Pitch);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Width => ref Unsafe.AsRef<int>(&Handle->Width);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Height => ref Unsafe.AsRef<int>(&Handle->Height);
	}

}
