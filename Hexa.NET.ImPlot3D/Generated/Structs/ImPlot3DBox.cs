// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImPlot3DBox")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlot3DBox
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Min")]
		[NativeName(NativeNameType.Type, "ImPlot3DPoint")]
		public ImPlot3DPoint Min;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Max")]
		[NativeName(NativeNameType.Type, "ImPlot3DPoint")]
		public ImPlot3DPoint Max;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlot3DBox(ImPlot3DPoint min = default, ImPlot3DPoint max = default)
		{
			Min = min;
			Max = max;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				byte ret = ImPlot3D.ClipLineSegmentNative(@this, p0, p1, p0Clipped, p1Clipped);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
				{
					byte ret = ImPlot3D.ClipLineSegmentNative(@this, p0, p1, (ImPlot3DPoint*)pp0Clipped, p1Clipped);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
				{
					byte ret = ImPlot3D.ClipLineSegmentNative(@this, p0, p1, p0Clipped, (ImPlot3DPoint*)pp1Clipped);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
				{
					fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
					{
						byte ret = ImPlot3D.ClipLineSegmentNative(@this, p0, p1, (ImPlot3DPoint*)pp0Clipped, (ImPlot3DPoint*)pp1Clipped);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				byte ret = ImPlot3D.ContainsNative(@this, point);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				ImPlot3D.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			fixed (ImPlot3DBox* @this = &this)
			{
				ImPlot3D.ExpandNative(@this, point);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "ImPlot3DBox")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlot3DBoxPtr : IEquatable<ImPlot3DBoxPtr>
	{
		public ImPlot3DBoxPtr(ImPlot3DBox* handle) { Handle = handle; }

		public ImPlot3DBox* Handle;

		public bool IsNull => Handle == null;

		public static ImPlot3DBoxPtr Null => new ImPlot3DBoxPtr(null);

		public ImPlot3DBox this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlot3DBoxPtr(ImPlot3DBox* handle) => new ImPlot3DBoxPtr(handle);

		public static implicit operator ImPlot3DBox*(ImPlot3DBoxPtr handle) => handle.Handle;

		public static bool operator ==(ImPlot3DBoxPtr left, ImPlot3DBoxPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlot3DBoxPtr left, ImPlot3DBoxPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlot3DBoxPtr left, ImPlot3DBox* right) => left.Handle == right;

		public static bool operator !=(ImPlot3DBoxPtr left, ImPlot3DBox* right) => left.Handle != right;

		public bool Equals(ImPlot3DBoxPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlot3DBoxPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlot3DBoxPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlot3DPoint Min => ref Unsafe.AsRef<ImPlot3DPoint>(&Handle->Min);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlot3DPoint Max => ref Unsafe.AsRef<ImPlot3DPoint>(&Handle->Max);
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			byte ret = ImPlot3D.ClipLineSegmentNative(Handle, p0, p1, p0Clipped, p1Clipped);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
			{
				byte ret = ImPlot3D.ClipLineSegmentNative(Handle, p0, p1, (ImPlot3DPoint*)pp0Clipped, p1Clipped);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
			{
				byte ret = ImPlot3D.ClipLineSegmentNative(Handle, p0, p1, p0Clipped, (ImPlot3DPoint*)pp1Clipped);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool ClipLineSegment([NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
			{
				fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
				{
					byte ret = ImPlot3D.ClipLineSegmentNative(Handle, p0, p1, (ImPlot3DPoint*)pp0Clipped, (ImPlot3DPoint*)pp1Clipped);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			byte ret = ImPlot3D.ContainsNative(Handle, point);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			ImPlot3D.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			ImPlot3D.ExpandNative(Handle, point);
		}

	}

}
