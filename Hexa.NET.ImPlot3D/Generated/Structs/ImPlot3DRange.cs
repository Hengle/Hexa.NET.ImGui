// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImPlot3DRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlot3DRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Min")]
		[NativeName(NativeNameType.Type, "float")]
		public float Min;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Max")]
		[NativeName(NativeNameType.Type, "float")]
		public float Max;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlot3DRange(float min = default, float max = default)
		{
			Min = min;
			Max = max;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			fixed (ImPlot3DRange* @this = &this)
			{
				byte ret = ImPlot3D.ContainsNative(@this, value);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImPlot3DRange* @this = &this)
			{
				ImPlot3D.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			fixed (ImPlot3DRange* @this = &this)
			{
				ImPlot3D.ExpandNative(@this, value);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Size")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float Size()
		{
			fixed (ImPlot3DRange* @this = &this)
			{
				float ret = ImPlot3D.SizeNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "ImPlot3DRange")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlot3DRangePtr : IEquatable<ImPlot3DRangePtr>
	{
		public ImPlot3DRangePtr(ImPlot3DRange* handle) { Handle = handle; }

		public ImPlot3DRange* Handle;

		public bool IsNull => Handle == null;

		public static ImPlot3DRangePtr Null => new ImPlot3DRangePtr(null);

		public ImPlot3DRange this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlot3DRangePtr(ImPlot3DRange* handle) => new ImPlot3DRangePtr(handle);

		public static implicit operator ImPlot3DRange*(ImPlot3DRangePtr handle) => handle.Handle;

		public static bool operator ==(ImPlot3DRangePtr left, ImPlot3DRangePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlot3DRangePtr left, ImPlot3DRangePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlot3DRangePtr left, ImPlot3DRange* right) => left.Handle == right;

		public static bool operator !=(ImPlot3DRangePtr left, ImPlot3DRange* right) => left.Handle != right;

		public bool Equals(ImPlot3DRangePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlot3DRangePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlot3DRangePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Min => ref Unsafe.AsRef<float>(&Handle->Min);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Max => ref Unsafe.AsRef<float>(&Handle->Max);
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			byte ret = ImPlot3D.ContainsNative(Handle, value);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			ImPlot3D.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			ImPlot3D.ExpandNative(Handle, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Size")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float Size()
		{
			float ret = ImPlot3D.SizeNative(Handle);
			return ret;
		}

	}

}
