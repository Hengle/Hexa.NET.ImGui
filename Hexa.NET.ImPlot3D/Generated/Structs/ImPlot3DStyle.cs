// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImPlot3DStyle")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlot3DStyle
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LineWeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineWeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Marker")]
		[NativeName(NativeNameType.Type, "int")]
		public int Marker;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MarkerSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float MarkerSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MarkerWeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float MarkerWeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FillAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float FillAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlotDefaultSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PlotDefaultSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlotMinSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PlotMinSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlotPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PlotPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LabelPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LabelPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LegendPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LegendPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LegendInnerPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LegendInnerPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LegendSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LegendSpacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Colors")]
		[NativeName(NativeNameType.Type, "ImVec4[15]")]
		public Vector4 Colors_0;
		public Vector4 Colors_1;
		public Vector4 Colors_2;
		public Vector4 Colors_3;
		public Vector4 Colors_4;
		public Vector4 Colors_5;
		public Vector4 Colors_6;
		public Vector4 Colors_7;
		public Vector4 Colors_8;
		public Vector4 Colors_9;
		public Vector4 Colors_10;
		public Vector4 Colors_11;
		public Vector4 Colors_12;
		public Vector4 Colors_13;
		public Vector4 Colors_14;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Colormap")]
		[NativeName(NativeNameType.Type, "ImPlot3DColormap")]
		public ImPlot3DColormap Colormap;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlot3DStyle(float lineWeight = default, int marker = default, float markerSize = default, float markerWeight = default, float fillAlpha = default, Vector2 plotDefaultSize = default, Vector2 plotMinSize = default, Vector2 plotPadding = default, Vector2 labelPadding = default, Vector2 legendPadding = default, Vector2 legendInnerPadding = default, Vector2 legendSpacing = default, Vector4* colors = default, ImPlot3DColormap colormap = default)
		{
			LineWeight = lineWeight;
			Marker = marker;
			MarkerSize = markerSize;
			MarkerWeight = markerWeight;
			FillAlpha = fillAlpha;
			PlotDefaultSize = plotDefaultSize;
			PlotMinSize = plotMinSize;
			PlotPadding = plotPadding;
			LabelPadding = labelPadding;
			LegendPadding = legendPadding;
			LegendInnerPadding = legendInnerPadding;
			LegendSpacing = legendSpacing;
			if (colors != default(Vector4*))
			{
				Colors_0 = colors[0];
				Colors_1 = colors[1];
				Colors_2 = colors[2];
				Colors_3 = colors[3];
				Colors_4 = colors[4];
				Colors_5 = colors[5];
				Colors_6 = colors[6];
				Colors_7 = colors[7];
				Colors_8 = colors[8];
				Colors_9 = colors[9];
				Colors_10 = colors[10];
				Colors_11 = colors[11];
				Colors_12 = colors[12];
				Colors_13 = colors[13];
				Colors_14 = colors[14];
			}
			Colormap = colormap;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlot3DStyle(float lineWeight = default, int marker = default, float markerSize = default, float markerWeight = default, float fillAlpha = default, Vector2 plotDefaultSize = default, Vector2 plotMinSize = default, Vector2 plotPadding = default, Vector2 labelPadding = default, Vector2 legendPadding = default, Vector2 legendInnerPadding = default, Vector2 legendSpacing = default, Span<Vector4> colors = default, ImPlot3DColormap colormap = default)
		{
			LineWeight = lineWeight;
			Marker = marker;
			MarkerSize = markerSize;
			MarkerWeight = markerWeight;
			FillAlpha = fillAlpha;
			PlotDefaultSize = plotDefaultSize;
			PlotMinSize = plotMinSize;
			PlotPadding = plotPadding;
			LabelPadding = labelPadding;
			LegendPadding = legendPadding;
			LegendInnerPadding = legendInnerPadding;
			LegendSpacing = legendSpacing;
			if (colors != default(Span<Vector4>))
			{
				Colors_0 = colors[0];
				Colors_1 = colors[1];
				Colors_2 = colors[2];
				Colors_3 = colors[3];
				Colors_4 = colors[4];
				Colors_5 = colors[5];
				Colors_6 = colors[6];
				Colors_7 = colors[7];
				Colors_8 = colors[8];
				Colors_9 = colors[9];
				Colors_10 = colors[10];
				Colors_11 = colors[11];
				Colors_12 = colors[12];
				Colors_13 = colors[13];
				Colors_14 = colors[14];
			}
			Colormap = colormap;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector4> Colors
		
		{
			get
			{
				fixed (Vector4* p = &this.Colors_0)
				{
					return new Span<Vector4>(p, 15);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImPlot3DStyle* @this = &this)
			{
				ImPlot3D.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_SetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetColor([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			fixed (ImPlot3DStyle* @this = &this)
			{
				ImPlot3D.SetColorNative(@this, idx, col);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "ImPlot3DStyle")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlot3DStylePtr : IEquatable<ImPlot3DStylePtr>
	{
		public ImPlot3DStylePtr(ImPlot3DStyle* handle) { Handle = handle; }

		public ImPlot3DStyle* Handle;

		public bool IsNull => Handle == null;

		public static ImPlot3DStylePtr Null => new ImPlot3DStylePtr(null);

		public ImPlot3DStyle this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlot3DStylePtr(ImPlot3DStyle* handle) => new ImPlot3DStylePtr(handle);

		public static implicit operator ImPlot3DStyle*(ImPlot3DStylePtr handle) => handle.Handle;

		public static bool operator ==(ImPlot3DStylePtr left, ImPlot3DStylePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlot3DStylePtr left, ImPlot3DStylePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlot3DStylePtr left, ImPlot3DStyle* right) => left.Handle == right;

		public static bool operator !=(ImPlot3DStylePtr left, ImPlot3DStyle* right) => left.Handle != right;

		public bool Equals(ImPlot3DStylePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlot3DStylePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlot3DStylePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LineWeight => ref Unsafe.AsRef<float>(&Handle->LineWeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Marker => ref Unsafe.AsRef<int>(&Handle->Marker);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MarkerSize => ref Unsafe.AsRef<float>(&Handle->MarkerSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MarkerWeight => ref Unsafe.AsRef<float>(&Handle->MarkerWeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FillAlpha => ref Unsafe.AsRef<float>(&Handle->FillAlpha);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 PlotDefaultSize => ref Unsafe.AsRef<Vector2>(&Handle->PlotDefaultSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 PlotMinSize => ref Unsafe.AsRef<Vector2>(&Handle->PlotMinSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 PlotPadding => ref Unsafe.AsRef<Vector2>(&Handle->PlotPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LabelPadding => ref Unsafe.AsRef<Vector2>(&Handle->LabelPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LegendPadding => ref Unsafe.AsRef<Vector2>(&Handle->LegendPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LegendInnerPadding => ref Unsafe.AsRef<Vector2>(&Handle->LegendInnerPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LegendSpacing => ref Unsafe.AsRef<Vector2>(&Handle->LegendSpacing);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector4> Colors
		
		{
			get
			{
				return new Span<Vector4>(&Handle->Colors_0, 15);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlot3DColormap Colormap => ref Unsafe.AsRef<ImPlot3DColormap>(&Handle->Colormap);
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			ImPlot3D.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_SetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetColor([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			ImPlot3D.SetColorNative(Handle, idx, col);
		}

	}

}
