// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImPlot3DQuat")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlot3DQuat
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "z")]
		[NativeName(NativeNameType.Type, "float")]
		public float Z;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "w")]
		[NativeName(NativeNameType.Type, "float")]
		public float W;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlot3DQuat(float x = default, float y = default, float z = default, float w = default)
		{
			X = x;
			Y = y;
			Z = z;
			W = w;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Conjugate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.ConjugateNative(@this, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Conjugate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				fixed (ImPlot3DQuat* pself = &self)
				{
					ImPlot3D.ConjugateNative(@this, (ImPlot3DQuat*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float Dot([NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat rhs)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				float ret = ImPlot3D.DotNative(@this, rhs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromElAz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void FromElAz([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.FromElAzNative(@this, elevation, azimuth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromTwoVectors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void FromTwoVectors([NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v0, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v1)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.FromTwoVectorsNative(@this, v0, v1);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Inverse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.InverseNative(@this, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Inverse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				fixed (ImPlot3DQuat* pself = &self)
				{
					ImPlot3D.InverseNative(@this, (ImPlot3DQuat*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float Length()
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				float ret = ImPlot3D.LengthNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalize")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public unsafe ImPlot3DQuat* Normalize()
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3DQuat* ret = ImPlot3D.NormalizeNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.NormalizedNative(@this, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				fixed (ImPlot3DQuat* pself = &self)
				{
					ImPlot3D.NormalizedNative(@this, (ImPlot3DQuat*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Slerp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Slerp([NativeName(NativeNameType.Param, "q1")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q1, [NativeName(NativeNameType.Param, "q2")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q2, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			fixed (ImPlot3DQuat* @this = &this)
			{
				ImPlot3D.SlerpNative(@this, q1, q2, t);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "ImPlot3DQuat")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlot3DQuatPtr : IEquatable<ImPlot3DQuatPtr>
	{
		public ImPlot3DQuatPtr(ImPlot3DQuat* handle) { Handle = handle; }

		public ImPlot3DQuat* Handle;

		public bool IsNull => Handle == null;

		public static ImPlot3DQuatPtr Null => new ImPlot3DQuatPtr(null);

		public ImPlot3DQuat this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlot3DQuatPtr(ImPlot3DQuat* handle) => new ImPlot3DQuatPtr(handle);

		public static implicit operator ImPlot3DQuat*(ImPlot3DQuatPtr handle) => handle.Handle;

		public static bool operator ==(ImPlot3DQuatPtr left, ImPlot3DQuatPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlot3DQuatPtr left, ImPlot3DQuatPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlot3DQuatPtr left, ImPlot3DQuat* right) => left.Handle == right;

		public static bool operator !=(ImPlot3DQuatPtr left, ImPlot3DQuat* right) => left.Handle != right;

		public bool Equals(ImPlot3DQuatPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlot3DQuatPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlot3DQuatPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float X => ref Unsafe.AsRef<float>(&Handle->X);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Y => ref Unsafe.AsRef<float>(&Handle->Y);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Z => ref Unsafe.AsRef<float>(&Handle->Z);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float W => ref Unsafe.AsRef<float>(&Handle->W);
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Conjugate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3D.ConjugateNative(Handle, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Conjugate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3D.ConjugateNative(Handle, (ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			ImPlot3D.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float Dot([NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat rhs)
		{
			float ret = ImPlot3D.DotNative(Handle, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromElAz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void FromElAz([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			ImPlot3D.FromElAzNative(Handle, elevation, azimuth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromTwoVectors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void FromTwoVectors([NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v0, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v1)
		{
			ImPlot3D.FromTwoVectorsNative(Handle, v0, v1);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Inverse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3D.InverseNative(Handle, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Inverse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3D.InverseNative(Handle, (ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float Length()
		{
			float ret = ImPlot3D.LengthNative(Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalize")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public unsafe ImPlot3DQuatPtr Normalize()
		{
			ImPlot3DQuatPtr ret = ImPlot3D.NormalizeNative(Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3D.NormalizedNative(Handle, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3D.NormalizedNative(Handle, (ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Slerp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Slerp([NativeName(NativeNameType.Param, "q1")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q1, [NativeName(NativeNameType.Param, "q2")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q2, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			ImPlot3D.SlerpNative(Handle, q1, q2, t);
		}

	}

}
